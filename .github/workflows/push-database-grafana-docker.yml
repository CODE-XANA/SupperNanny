name: Build and Push PostgreSQL & Grafana to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Set up directory structure and configuration files
      - name: Set up directory structure
        run: |
          mkdir -p init-scripts
          mkdir -p grafana/provisioning/datasources
          mkdir -p grafana/provisioning/dashboards
          mkdir -p grafana/dashboards
      
      # Download the SQL schema file
      - name: Download SuperNanny Schema
        run: |
          curl -o init-scripts/01-schema.sql https://raw.githubusercontent.com/CODE-XANA/SupperNanny/main/rust-landlock-main/queries_sql/full_script.sql
      
      # Create privileges SQL scripts
      - name: Create privileges scripts
        run: |
          cat > init-scripts/02-privileges.sql << 'EOF'
          GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO sandboxuser;
          GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO sandboxuser;
          EOF
          
          cat > init-scripts/03-readonly-user.sql << 'EOF'
          -- Create a separate read-only user for Grafana
          CREATE USER sandboxread WITH PASSWORD 'readonly';
          GRANT CONNECT ON DATABASE sandboxdb TO sandboxread;
          GRANT USAGE ON SCHEMA public TO sandboxread;
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO sandboxread;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO sandboxread;
          EOF
      
      # Create Grafana configuration files
      - name: Create Grafana configuration files
        run: |
          cat > grafana/provisioning/datasources/postgresql.yml << 'EOF'
          apiVersion: 1
          datasources:
            - name: PostgreSQL
              type: postgres
              access: proxy
              url: postgres:5432
              database: sandboxdb
              user: ${DB_READ_USER:-sandboxread}
              secureJsonData:
                password: ${DB_READ_PASSWORD:-readonly}
              jsonData:
                sslmode: require
                postgresVersion: 1200
                timescaledb: false
              uid: "DS_POSTGRESQL"
          EOF
          
          cat > grafana/provisioning/dashboards/supernanny-dashboards.yml << 'EOF'
          apiVersion: 1
          providers:
            - name: 'Supernanny Dashboards'
              orgId: 1
              folder: 'Supernanny'
              folderUid: 'supernanny'
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /var/lib/grafana/dashboards
          EOF
      
      # Create Grafana dashboard
      - name: Create Grafana dashboard
        run: |
          cat > grafana/dashboards/supernanny_soc_overview_dashboard.json << 'EOF'
          {
            "annotations": {
              "list": []
            },
            "editable": true,
            "fiscalYearStartMonth": 0,
            "graphTooltip": 0,
            "id": null,
            "links": [],
            "liveNow": false,
            "panels": [
              {
                "type": "timeseries",
                "title": "Sandbox Events Over Time",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "time_series",
                    "rawSql": "SELECT $__timeGroup(timestamp, '1m') AS time, COUNT(*) AS value FROM sandbox_events WHERE $__timeFilter(timestamp) GROUP BY time ORDER BY time",
                    "refId": "A"
                  }
                ],
                "fieldConfig": {
                  "defaults": {
                    "unit": "short",
                    "color": {
                      "mode": "palette-classic"
                    }
                  },
                  "overrides": []
                },
                "gridPos": {
                  "x": 0,
                  "y": 0,
                  "w": 12,
                  "h": 9
                }
              },
              {
                "type": "bar",
                "title": "Top Apps Causing Denials",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "table",
                    "rawSql": "SELECT app_name AS metric, COUNT(*) AS value FROM sandbox_events WHERE result = 'denied' AND $__timeFilter(timestamp) GROUP BY app_name ORDER BY value DESC LIMIT 10",
                    "refId": "B"
                  }
                ],
                "gridPos": {
                  "x": 12,
                  "y": 0,
                  "w": 12,
                  "h": 9
                }
              },
              {
                "type": "stat",
                "title": "Pending Policy Requests",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "table",
                    "rawSql": "SELECT COUNT(*) AS value FROM policy_change_requests WHERE status = 'pending'",
                    "refId": "C"
                  }
                ],
                "fieldConfig": {
                  "defaults": {
                    "unit": "none",
                    "color": {
                      "mode": "thresholds"
                    },
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green",
                          "value": null
                        },
                        {
                          "color": "red",
                          "value": 5
                        }
                      ]
                    }
                  }
                },
                "options": {
                  "reduceOptions": {
                    "calcs": ["last"],
                    "fields": "",
                    "values": false
                  }
                },
                "gridPos": {
                  "x": 0,
                  "y": 9,
                  "w": 6,
                  "h": 6
                }
              }
            ],
            "refresh": "30s",
            "schemaVersion": 38,
            "style": "dark",
            "tags": [
              "supernanny",
              "security",
              "overview"
            ],
            "templating": {
              "list": []
            },
            "time": {
              "from": "now-6h",
              "to": "now"
            },
            "timepicker": {
              "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
              ]
            },
            "timezone": "browser",
            "title": "Supernanny SOC Overview",
            "uid": "supernanny-soc-overview",
            "version": 1,
            "weekStart": ""
          }
          EOF
      
      # Create PostgreSQL Dockerfile
      - name: Create PostgreSQL Dockerfile
        run: |
          cat > Dockerfile.postgres << 'EOF'
          FROM postgres:latest
          
          # Add labels for metadata
          LABEL maintainer="SupperNanny Team"
          LABEL version="1.0"
          LABEL description="PostgreSQL database for SupperNanny security monitoring system"
          
          # Create directory for init scripts
          RUN mkdir -p /docker-entrypoint-initdb.d
          
          # Copy initialization scripts
          COPY init-scripts/ /docker-entrypoint-initdb.d/
          
          # Set environment variables
          ENV POSTGRES_USER=sandboxuser
          ENV POSTGRES_PASSWORD=supernanny
          ENV POSTGRES_DB=sandboxdb
          
          # PostgreSQL uses port 5432
          EXPOSE 5432
          
          EOF
      
      # Create Grafana Dockerfile
      - name: Create Grafana Dockerfile
        run: |
          cat > Dockerfile.grafana << 'EOF'
          FROM grafana/grafana-enterprise:latest
          
          # Add labels for metadata
          LABEL maintainer="SupperNanny Team"
          LABEL version="1.0"
          LABEL description="Grafana for SupperNanny security monitoring dashboard"
          
          # Set environment variables
          ENV GF_SECURITY_ADMIN_PASSWORD=admin
          ENV GF_SERVER_DOMAIN=supernanny.local
          ENV GF_SERVER_ROOT_URL="%(protocol)s://%(domain)s:%(http_port)s/"
          ENV GF_SECURITY_DISABLE_GRAVATAR=true
          ENV GF_SECURITY_COOKIE_SECURE=true
          ENV GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
          ENV GF_SECURITY_CONTENT_SECURITY_POLICY=true
          ENV GF_SECURITY_X_CONTENT_TYPE_OPTIONS=true
          ENV GF_SECURITY_X_XSS_PROTECTION=true
          ENV GF_AUTH_BASIC_ENABLED=false
          ENV GF_AUTH_ANONYMOUS_ENABLED=false
          
          # Copy provisioning files
          COPY grafana/provisioning/ /etc/grafana/provisioning/
          COPY grafana/dashboards/ /var/lib/grafana/dashboards/
          
          # User grafana is defined in the base image
          
          # Grafana uses port 3000
          EXPOSE 3000
          
          # Add health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD wget -qO- http://localhost:3000/api/health || exit 1
          EOF

      # Log in to Docker Hub - CORRECTED PART BEGINS HERE
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # CORRECTED PART ENDS HERE
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Build and push PostgreSQL image
      - name: Build and push PostgreSQL
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.postgres
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/supernanny-postgres:latest
      
      # Build and push Grafana image
      - name: Build and push Grafana
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.grafana
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/supernanny-grafana:latest
      
      # Create compose file that uses your custom images
      - name: Create custom Docker Compose file
        run: |
          cat > docker-compose.yml << EOF
          version: '3.8'
          
          services:
            postgres:
              image: ${{ secrets.DOCKER_USERNAME }}/supernanny-postgres:latest
              container_name: supernanny-postgres
              restart: always
              ports:
                - "127.0.0.1:5432:5432"
              networks:
                - postgres-net
                - shared-net
              volumes:
                - postgres-data:/var/lib/postgresql/data
          
            grafana:
              image: ${{ secrets.DOCKER_USERNAME }}/supernanny-grafana:latest
              container_name: supernanny-grafana
              restart: always
              ports:
                - "127.0.0.1:3000:3000"
              networks:
                - grafana-net
                - shared-net
              volumes:
                - grafana-data:/var/lib/grafana
          
          networks:
            postgres-net:
            grafana-net:
            shared-net:
          
          volumes:
            postgres-data:
            grafana-data:
          EOF
          
      # Output completion message and usage instructions
      - name: Output deployment instructions
        run: |
          echo "🎉 Custom Docker images have been built and pushed to Docker Hub!"
          echo ""
          echo "Repository: ${{ secrets.DOCKER_USERNAME }}/supernanny-postgres:latest"
          echo "Repository: ${{ secrets.DOCKER_USERNAME }}/supernanny-grafana:latest"
          echo ""
          echo "To deploy, run:"
          echo "docker-compose up -d"
