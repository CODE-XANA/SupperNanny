- name: Setup Kubernetes Masternode
  hosts: localhost
  become: true
  vars:
    pod_network_cidr: "192.168.0.0/16"
    calico_version: "v3.30.0"

  tasks:

  - name: Update and upgrade system
    apt:
      update_cache: yes
      upgrade: dist

  - name: Disable swap in fstab
    lineinfile:
      path: /etc/fstab
      regexp: '^\s*/swap'
      state: absent

  - name: Load br_netfilter module
    copy:
      dest: /etc/modules-load.d/k8s.conf
      content: "br_netfilter\n"

  - name: Apply sysctl settings for Kubernetes
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        net.bridge.bridge-nf-call-ip6tables = 1

  - name: Reload sysctl
    command: sysctl --system

  - name: Install containerd
    apt:
      name: containerd
      state: present

  - name: Create containerd config directory
    file:
      path: /etc/containerd
      state: directory

  - name: Generate default containerd config
    shell: containerd config default > /etc/containerd/config.toml
    args:
      creates: /etc/containerd/config.toml

  - name: Enable SystemdCgroup in containerd config
    replace:
      path: /etc/containerd/config.toml
      regexp: '^(\s*SystemdCgroup\s*=\s*)false'
      replace: '\1true'

  - name: Restart and enable containerd
    systemd:
      name: containerd
      enabled: true
      state: restarted

  - name: Install Kubernetes dependencies
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
      state: present

  - name: Add Kubernetes apt key
    shell: |
      mkdir -p -m 755 /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | \
      gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    args:
      creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Add Kubernetes repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: |
        deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /

  - name: Update apt cache for Kubernetes
    apt:
      update_cache: yes

  - name: Install Kubernetes components
    apt:
      name:
        - kubelet
        - kubeadm
        - kubectl
      state: present

  - name: Hold Kubernetes packages (apt-mark hold)
    command: apt-mark hold {{ item }}
    loop:
      - kubelet
      - kubeadm
      - kubectl

  - name: Enable kubelet service
    systemd:
      name: kubelet
      enabled: true
      state: started

  - name: Initialize Kubernetes cluster
    command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
    register: kubeadm_output
    changed_when: "'already initialized' not in kubeadm_output.stdout"

  - name: Set up kubeconfig for user
    shell: |
      mkdir -p $HOME/.kube
      cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      chown $(id -u):$(id -g) $HOME/.kube/config
    args:
      executable: /bin/bash

  - name: Install Kubernetes Python client
    apt:
      name: python3-kubernetes
      state: present

  - name: Deploy Calico CRDs
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/operator-crds.yaml

  - name: Deploy Calico Operator
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml

  - name: Download Calico custom resources
    get_url:
      url: https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/custom-resources.yaml
      dest: /tmp/custom-resources.yaml

  - name: Apply Calico custom resources
    kubernetes.core.k8s:
      state: present
      src: /tmp/custom-resources.yaml

  - name: Wait for Kubernetes node to be Ready
    shell: kubectl get nodes --no-headers | grep -q ' Ready '
    register: node_ready_check
    retries: 20
    delay: 10
    until: node_ready_check.rc == 0
    changed_when: false

  - name: Display Kubernetes nodes status
    shell: kubectl get nodes
    register: kube_nodes_output
    changed_when: false

  - name: Show cluster nodes output
    debug:
      msg: "{{ kube_nodes_output.stdout_lines }}"

