- name: masternode
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Mise à jour
      become: true
      ansible.builtin.apt:
        update_cache: yes

    - name: Upgrade
      become: true
      ansible.builtin.apt:
        upgrade: yes
    
    - name: Désactiver le swapoff y compris lors du redémarrage de la machine
      become: true
      command: sed -i '/swap/ s/^/#/' /etc/fstab

    - name: Configuration réseau nécessaire 1 - charger br_netfilter
      become: true
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter
          owner: root
          group: root
          mode: '0644'

    - name: Configuration réseau nécessaire 2 - sysctl params
      become: true
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        owner: root
        group: root
        mode: '0644'

    - name: Appliquer les paramètres sysctl
      become: true
      ansible.builtin.command: sysctl --system


    - name: Installation paquets
      become: true
      ansible.builtin.apt:
        name: containerd

    - name: Créer le répertoire /etc/apt/keyrings
      become: true
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory

    - name: Créer le fichier de configuration de containerd
      ansible.builtin.command: containerd config default
      register: containerd_config
      changed_when: true
      failed_when: containerd_config.rc != 0

    - name: Créer le répertoire /etc/containerd si nécessaire
      become: true
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Sauvegarder la configuration par défaut dans /etc/containerd/config.toml
      become: true
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"
        mode: '0644'

    - name: Modifier SystemdCgroup dans le fichier containerd config.toml
      become: true
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(SystemdCgroup)\s*=\s*false'
        line: 'SystemdCgroup = true'
        backrefs: yes
        insertafter: '^\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
      when: not ansible_check_mode

    - name: Démarrer et activer le systemctl containerd
      become: true
      ansible.builtin.service:
        name: containerd
        state: started
        enabled: yes
      when: not ansible_check_mode

    - name: Installer les utilitaires
      become: true
      ansible.builtin.apt:
        name: 
        - apt-transport-https 
        - ca-certificates 
        - curl
        - gpg

    - name: Créer le répertoire /etc/apt/keyrings
      become: true
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Télécharger et convertir la clé GPG Kubernetes
      become: true
      ansible.builtin.command: >
        bash -c "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Ajouter le dépôt Kubernetes dans sources.list.d
      become: true
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        owner: root
        group: root
        mode: '0644'

    - name: Mise à jour 
      become: true
      ansible.builtin.apt:
        update_cache: yes

    - name: Installer kublet, kubeadm et kubectl
      become: true
      ansible.builtin.apt:
        name: 
        - kubelet
        - kubeadm
        - kubectl
        state: present
      when: not ansible_check_mode

    - name: Mettre en hold kublet, kubeadm et kubectl
      become: true
      command: apt-mark hold kubelet kubeadm kubectl
      when: not ansible_check_mode

    - name: Récupérer l'adresse IP primaire de l'interface par défaut
      ansible.builtin.shell: |
        ip route get 1.1.1.1 | grep -oP 'src \K[0-9\.]+'
      register: default_ip
      changed_when: false

    - name: Initialiser le cluster dynamiquement
      become: true
      ansible.builtin.command:
        cmd: kubeadm init --apiserver-advertise-address={{ default_ip.stdout }} --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=FileAvailable,Port-10250,DirAvailable
      register: kubeadm_init_result
      failed_when: kubeadm_init_result.rc != 0 and "'Your Kubernetes control-plane has initialized successfully!' not in kubeadm_init_result.stdout"
      changed_when: "'Your Kubernetes control-plane has initialized successfully!' in kubeadm_init_result.stdout"

    - name: Données sensibles à conserver
      debug:
        msg: "{{ kubeadm_init_result.stdout }}"

    - name: Attendre que le port 6443 (API server) soit ouvert
      ansible.builtin.wait_for:
        port: 6443
        host: 127.0.0.1
        timeout: 60

    - name: Attendre que le nœud Kubernetes soit Ready
      ansible.builtin.shell: |
        for i in {1..20}; do
        kubectl get nodes | grep -q ' Ready ' && break
        echo "En attente du nœud en état Ready..."
        sleep 10
        done
      register: node_ready_check
      changed_when: false

    - name: Créer le répertoire .kube dans le home de l'utilisateur courant
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"

    - name: Copier le fichier admin.conf vers ~/.kube/config
      become: true
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
      when: not ansible_check_mode

    - name: Vérifier le répertoire .kube
      debug:
        msg: "Le répertoire .kube est situé ici : {{ ansible_env.HOME }}/.kube"

    - name: Attendre que kubectl réponde
      shell: |
        for i in {1..20}; do
          kubectl version --request-timeout='5s' &>/dev/null && break
          echo "En attente que kubectl réponde..."
          sleep 5
        done
      register: kubectl_ready
      changed_when: false

    - name: Créer les CRDs de Calico
      ansible.builtin.command:
        cmd: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/operator-crds.yaml
      register: calico_crds_result
      failed_when: calico_crds_result.rc != 0
      changed_when: "'created' in calico_crds_result.stdout"

    - name: Créer le Tigera Operator de Calico
      ansible.builtin.command:
        cmd: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/tigera-operator.yaml
      register: tigera_operator_result
      failed_when: tigera_operator_result.rc != 0
      changed_when: "'created' in tigera_operator_result.stdout"
    
    - name: Télécharger le fichier custom-resources.yaml
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/custom-resources.yaml
        dest: ~/custom-resources.yaml
      register: download_custom_resources

    - name: Créer les ressources personnalisées de Calico
      ansible.builtin.command:
        cmd: kubectl create -f ~/custom-resources.yaml
      register: create_custom_resources_result

    - name: Redémarrer containerd
      become: true
      ansible.builtin.service:
        name: containerd
        state: restarted

    - name: Redémarrer kubelet
      become: true
      ansible.builtin.service:
        name: kubelet
        state: restarted
