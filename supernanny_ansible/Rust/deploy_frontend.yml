---
- name: Deploy SuperNanny Frontend (Rust + Yew)
  hosts: supernanny
  gather_facts: yes
  become: false               # build as the SSH user

#################################################################
# ─── variables ─────────────────────────────────────────────────
  vars:
    user_home: "{{ ansible_user_dir }}"
    project_root: "{{ user_home }}/SupperNanny"

    frontend_dir:        "{{ project_root }}/SuperNanny_front/frontend"
    static_server_dir:   "{{ project_root }}/SuperNanny_front/static_server"
    static_server_binary: "{{ project_root }}/SuperNanny_front/target/release/static_server"

    rustup_bin:   "{{ user_home }}/.cargo/bin/rustup"
    cargo_bin:    "{{ user_home }}/.cargo/bin/cargo"
    binstall_bin: "{{ user_home }}/.cargo/bin/cargo-binstall"
    trunk_bin:    "{{ user_home }}/.cargo/bin/trunk"

#################################################################
  tasks:
    # 1 ─ Ensure the WebAssembly target is installed ────────────
    - name: rustup add wasm32‑unknown‑unknown
      command: "{{ rustup_bin }} target add wasm32-unknown-unknown"
      changed_when: false

    # 2 ─ Install cargo‑binstall if missing ─────────────────────
    - name: Install cargo‑binstall
      shell: |
        source "$HOME/.cargo/env"
        {{ cargo_bin }} install cargo-binstall --locked
      args:
        executable: /bin/bash
        creates: "{{ binstall_bin }}"

    # 3 ─ Install Trunk (static binary) if missing ─────────────
    - name: Check for existing Trunk
      stat:
        path: "{{ trunk_bin }}"
      register: trunk_status

    - name: Install Trunk with cargo‑binstall
      shell: |
        source "$HOME/.cargo/env"
        {{ binstall_bin }} trunk --no-confirm
      args:
        executable: /bin/bash
      when: not trunk_status.stat.exists

    # 4 ─ Build the Yew frontend with Trunk ────────────────────
    - name: Build frontend (release)
      shell: |
        source "$HOME/.cargo/env"
        {{ trunk_bin }} build --release
      args:
        chdir: "{{ frontend_dir }}"
        executable: /bin/bash

    # 5 ─ Build the static server crate ────────────────────────
    - name: Build static_server (release)
      shell: |
        source "$HOME/.cargo/env"
        {{ cargo_bin }} build --release
      args:
        chdir: "{{ static_server_dir }}"
        executable: /bin/bash
      register: build_result
      failed_when: build_result.rc != 0

    # 6 ─ Verify the binary was produced ───────────────────────
    - name: Verify static_server binary exists
      stat:
        path: "{{ static_server_binary }}"
      register: binary_status
      failed_when: not binary_status.stat.exists

    # 7 ─ Smoke‑test the binary ────────────────────────────────
    - name: Run static_server ‑‑version
      shell: |
        cd {{ static_server_dir }}
        {{ static_server_binary }} --version \
          || {{ static_server_binary }} -v \
          || echo "Binary starts but has no version flag"
      args:
        executable: /bin/bash
      register: test_run
      failed_when: test_run.rc > 1        # allow rc 0 or 1
      ignore_errors: yes

    # 8 ─ Deploy / reload systemd unit ─────────────────────────
    - name: Install systemd service
      become: true
      copy:
        dest: /etc/systemd/system/supernanny-frontend.service
        mode: '0644'
        content: |
          [Unit]
          Description=SuperNanny Static Server
          After=network.target

          [Service]
          User={{ ansible_user_id }}
          WorkingDirectory={{ static_server_dir }}
          Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:{{ user_home }}/.cargo/bin"
          Environment="RUST_LOG=info"
          ExecStart={{ static_server_binary }}
          Restart=on-failure
          RestartSec=5
          PrivateTmp=yes
          ProtectSystem=full

          [Install]
          WantedBy=multi-user.target
      notify: restart frontend

#################################################################
  handlers:
    - name: restart frontend
      become: true
      systemd:
        name: supernanny-frontend
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: check service status
      become: true
      shell: systemctl status supernanny-frontend || journalctl -xe -u supernanny-frontend
      register: service_status
      changed_when: false
      failed_when: false
      listen: restart frontend
