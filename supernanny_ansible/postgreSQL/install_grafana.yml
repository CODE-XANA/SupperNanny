- name: Install and configure Grafana
  hosts: supernanny
  become: true
  vars:
    grafana_repo: "deb [signed-by=/usr/share/keyrings/grafana-archive-keyring.gpg] https://packages.grafana.com/oss/deb stable main"
    grafana_repo_key_url: "https://packages.grafana.com/gpg.key"
    db_host: "127.0.0.1"
    db_name: "sandboxdb"
    db_user: "sandboxuser"
    db_password: "supernanny"
  tasks:
    - name: Install required APT packages
      apt:
        name:
          - apt-transport-https
          - software-properties-common
          - wget
          - gnupg2
        update_cache: yes

    - name: Create keyring directory
      file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Download and import Grafana GPG key
      shell: |
        wget -q -O - {{ grafana_repo_key_url }} | gpg --dearmor | tee /usr/share/keyrings/grafana-archive-keyring.gpg > /dev/null
      args:
        creates: /usr/share/keyrings/grafana-archive-keyring.gpg

    - name: Add Grafana APT repository
      apt_repository:
        repo: "{{ grafana_repo }}"
        state: present
        filename: grafana

    - name: Update APT cache after adding Grafana repo
      apt:
        update_cache: yes

    - name: Install Grafana
      apt:
        name: grafana-enterprise
        state: present

    - name: Ensure Grafana service is started and enabled
      service:
        name: grafana-server
        state: started
        enabled: yes

    - name: Create Grafana datasources provisioning directory
      file:
        path: /etc/grafana/provisioning/datasources
        state: directory
        mode: '0755'

    - name: Configure PostgreSQL datasource in Grafana
      copy:
        dest: /etc/grafana/provisioning/datasources/postgresql.yml
        content: |
          apiVersion: 1
          datasources:
            - name: PostgreSQL
              type: postgres
              access: proxy
              url: "{{ db_host }}:5432"
              database: "{{ db_name }}"
              user: "{{ db_user }}"
              secureJsonData:
                password: "{{ db_password }}"
              jsonData:
                sslmode: disable
                postgresVersion: 1200
                timescaledb: false
              uid: "DS_POSTGRESQL"
      notify: Restart Grafana

    # Dashboard provisioning configuration
    - name: Create Grafana dashboards provisioning directory
      file:
        path: /etc/grafana/provisioning/dashboards
        state: directory
        mode: '0755'

    - name: Create dashboards storage directory
      file:
        path: /var/lib/grafana/dashboards
        state: directory
        mode: '0755'
        owner: grafana
        group: grafana

    - name: Configure dashboard provisioning
      copy:
        dest: /etc/grafana/provisioning/dashboards/supernanny-dashboards.yml
        content: |
          apiVersion: 1
          providers:
            - name: 'Supernanny Dashboards'
              orgId: 1
              folder: 'Supernanny'
              folderUid: 'supernanny'
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /var/lib/grafana/dashboards
      notify: Restart Grafana

    - name: Add Supernanny SOC Overview dashboard
      copy:
        dest: /var/lib/grafana/dashboards/supernanny_soc_overview_dashboard.json
        content: |
          {
            "annotations": {
              "list": []
            },
            "editable": true,
            "fiscalYearStartMonth": 0,
            "graphTooltip": 0,
            "id": null,
            "links": [],
            "liveNow": false,
            "panels": [
              {
                "type": "timeseries",
                "title": "Sandbox Events Over Time",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "time_series",
                    "rawSql": "SELECT $__timeGroup(timestamp, '1m') AS time, COUNT(*) AS value FROM sandbox_events WHERE $__timeFilter(timestamp) GROUP BY time ORDER BY time",
                    "refId": "A"
                  }
                ],
                "fieldConfig": {
                  "defaults": {
                    "unit": "short",
                    "color": {
                      "mode": "palette-classic"
                    }
                  },
                  "overrides": []
                },
                "gridPos": {
                  "x": 0,
                  "y": 0,
                  "w": 12,
                  "h": 9
                }
              },
              {
                "type": "bar",
                "title": "Top Apps Causing Denials",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "table",
                    "rawSql": "SELECT app_name AS metric, COUNT(*) AS value FROM sandbox_events WHERE result = 'denied' AND $__timeFilter(timestamp) GROUP BY app_name ORDER BY value DESC LIMIT 10",
                    "refId": "B"
                  }
                ],
                "gridPos": {
                  "x": 12,
                  "y": 0,
                  "w": 12,
                  "h": 9
                }
              },
              {
                "type": "stat",
                "title": "Pending Policy Requests",
                "datasource": {
                  "type": "postgres",
                  "uid": "DS_POSTGRESQL"
                },
                "targets": [
                  {
                    "format": "table",
                    "rawSql": "SELECT COUNT(*) AS value FROM policy_change_requests WHERE status = 'pending'",
                    "refId": "C"
                  }
                ],
                "fieldConfig": {
                  "defaults": {
                    "unit": "none",
                    "color": {
                      "mode": "thresholds"
                    },
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green",
                          "value": null
                        },
                        {
                          "color": "red",
                          "value": 5
                        }
                      ]
                    }
                  }
                },
                "options": {
                  "reduceOptions": {
                    "calcs": ["last"],
                    "fields": "",
                    "values": false
                  }
                },
                "gridPos": {
                  "x": 0,
                  "y": 9,
                  "w": 6,
                  "h": 6
                }
              }
            ],
            "refresh": "30s",
            "schemaVersion": 38,
            "style": "dark",
            "tags": [
              "supernanny",
              "security",
              "overview"
            ],
            "templating": {
              "list": []
            },
            "time": {
              "from": "now-6h",
              "to": "now"
            },
            "timepicker": {
              "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
              ]
            },
            "timezone": "browser",
            "title": "Supernanny SOC Overview",
            "uid": "supernanny-soc-overview",
            "version": 1,
            "weekStart": ""
          }
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart Grafana

    # Optional - Configure Grafana server settings
    - name: Configure Grafana server settings
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: "^;domain =", line: "domain = supernanny.local" }
        - { regexp: "^;root_url =", line: "root_url = %(protocol)s://%(domain)s:%(http_port)s/" }
      notify: Restart Grafana

  handlers:
    - name: Restart Grafana
      service:
        name: grafana-server
        state: restarted
